 using System.Security.Cryptography;
 using System.Net;
 
 public enum HashAlgorithm_t
        {
            MD5,
            SHA1,
            SHA256,
            SHA384,
            SHA512
        };
        internal static byte[] GenerateSalt(int saltByteSize = 64)
        {
            using (RNGCryptoServiceProvider saltGenerator = new RNGCryptoServiceProvider())
            {
                byte[] salt = new byte[saltByteSize];
                saltGenerator.GetBytes(salt);
                return salt;
            }
        }
        internal static long loginBaseCode(NetworkCredential cred, out bool isAdmin)
        {
            logger.Trace("Autentication ...");
            isAdmin = false;
            DBEntities DB = new DBEntities();
            var LI = DB.USERS.FirstOrDefault(X => X.USERNAME.ToLower() == cred.UserName.ToLower());
            if (LI != null)
            {
                if (Authenticate(cred.Password, LI.PASSWORD_SALT, LI.PASSWORD_HASH))
                {
                    logger.Trace($"Access guarantee for {LI.USERNAME}");
                    return LI.ID_UTENTE;
                }
                else
                {
                    logger.Trace($"Authenticate FAILED AUTH");
                    return -1;
                }
            }
            else
            {
                logger.Trace($"Authenticate FIRST");
                return -1;
            }
        }
        protected static bool Authenticate(string insertedPassword, string psswdSalt, string hashedPasswd)
        {

            string insertedHashedPassword = CalculateHashWithSalt(insertedPassword, psswdSalt, HashAlgorithm_t.SHA1);
            return insertedHashedPassword == hashedPasswd;
        }
        public static string CalculateHashWithSalt(string password, string saltBsae64, HashAlgorithm_t hAlgorithm, bool aspNetCompatibile = true)
        {
            HashAlgorithm algorithm;
            switch (hAlgorithm)
            {
                case HashAlgorithm_t.MD5:
                    algorithm = new MD5CryptoServiceProvider();
                    break;
                case HashAlgorithm_t.SHA1:
                    algorithm = new SHA1Managed();
                    break;
                case HashAlgorithm_t.SHA256:
                    algorithm = new SHA256Managed();
                    break;
                case HashAlgorithm_t.SHA384:
                    algorithm = new SHA384Managed();
                    break;
                case HashAlgorithm_t.SHA512:
                    algorithm = new SHA512Managed();
                    break;
                default:
                    throw new ArgumentOutOfRangeException("hAlgorithm");
            }

            byte[] plainTextBytes;
            if (aspNetCompatibile)
            {
                plainTextBytes = Encoding.Unicode.GetBytes(password);
            }
            else
            {
                plainTextBytes = Encoding.UTF8.GetBytes(password);
            }


            byte[] saltBytes = Convert.FromBase64String(saltBsae64);

            byte[] plainTextWithSaltBytes =
                new byte[plainTextBytes.Length + saltBytes.Length];

            if (aspNetCompatibile)
            {
                saltBytes.CopyTo(plainTextWithSaltBytes, 0);
                plainTextBytes.CopyTo(plainTextWithSaltBytes, saltBytes.Length);
            }
            else
            {
                plainTextBytes.CopyTo(plainTextWithSaltBytes, 0);
                saltBytes.CopyTo(plainTextWithSaltBytes, plainTextBytes.Length);
            }

            byte[] hashBytes = algorithm.ComputeHash(plainTextWithSaltBytes);
            var t = Convert.ToBase64String(hashBytes);
            return t;
        }
